import os
import logging
import asyncio
from typing import Optional
from telegram import Bot
from telegram.error import TelegramError
from datetime import datetime

logger = logging.getLogger(__name__)

class AsyncTelegramBot:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π Telegram –±–æ—Ç –¥–ª—è UPAK"""
    
    def __init__(self, token: str):
        self.token = token
        self.bot = Bot(token=token)
        self._initialized = False
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
            me = await self.bot.get_me()
            logger.info(f"Telegram bot initialized: @{me.username}")
            self._initialized = True
            return True
        except Exception as e:
            logger.error(f"Failed to initialize Telegram bot: {e}")
            return False
    
    async def send_message(
        self, 
        chat_id: int, 
        text: str, 
        parse_mode: str = "HTML",
        disable_web_page_preview: bool = True
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        """
        if not self._initialized:
            logger.warning("Bot not initialized, attempting to initialize...")
            if not await self.initialize():
                return False
        
        try:
            await self.bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode=parse_mode,
                disable_web_page_preview=disable_web_page_preview
            )
            logger.info(f"Message sent to {chat_id}")
            return True
            
        except TelegramError as e:
            logger.error(f"Telegram error sending message to {chat_id}: {e}")
            return False
        except Exception as e:
            logger.error(f"Unexpected error sending message to {chat_id}: {e}")
            return False
    
    async def send_order_created_notification(
        self, 
        chat_id: int, 
        order_id: str, 
        product_name: str,
        generated_images_count: int = 0
    ) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞"""
        message = f"""
üéâ <b>–í–∞—à –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!</b>

üìã <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {order_id}
üõç <b>–¢–æ–≤–∞—Ä:</b> {product_name}
üìÖ <b>–î–∞—Ç–∞:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}

üìÑ PDF —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π —Ç–æ–≤–∞—Ä–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.
"""
        
        if generated_images_count > 0:
            message += f"\nüñº –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {generated_images_count} —à—Ç."
        
        message += "\n\nüí≥ –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –æ–ø–ª–∞—Ç–µ."
        
        return await self.send_message(chat_id, message)
    
    async def send_payment_success_notification(
        self, 
        chat_id: int, 
        order_id: str, 
        pdf_url: str
    ) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ"""
        message = f"""
‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>

üìã <b>–ó–∞–∫–∞–∑:</b> {order_id}
üìÖ <b>–û–ø–ª–∞—á–µ–Ω–æ:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}

üìÑ <b>–í–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞ –≥–æ—Ç–æ–≤–∞:</b>
<a href="{pdf_url}">–°–∫–∞—á–∞—Ç—å PDF</a>

–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ UPAK! üöÄ
"""
        
        return await self.send_message(chat_id, message)
    
    async def send_error_notification(
        self, 
        chat_id: int, 
        order_id: str, 
        error_message: str = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞"
    ) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        message = f"""
‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞</b>

üìã <b>–ó–∞–∫–∞–∑:</b> {order_id}
üìÖ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}

‚ö†Ô∏è {error_message}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.
"""
        
        return await self.send_message(chat_id, message)
    
    async def send_admin_notification(
        self, 
        admin_chat_id: int, 
        message: str
    ) -> bool:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        admin_message = f"""
üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

{message}
"""
        
        return await self.send_message(admin_chat_id, admin_message)
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–æ—Ç–æ–º"""
        try:
            await self.bot.close()
            logger.info("Telegram bot connection closed")
        except Exception as e:
            logger.error(f"Error closing Telegram bot: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
_bot_instance: Optional[AsyncTelegramBot] = None

async def get_telegram_bot() -> Optional[AsyncTelegramBot]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Telegram –±–æ—Ç–∞"""
    global _bot_instance
    
    if _bot_instance is None:
        token = os.getenv("TELEGRAM_BOT_TOKEN")
        if not token:
            logger.error("TELEGRAM_BOT_TOKEN not found in environment variables")
            return None
        
        _bot_instance = AsyncTelegramBot(token)
        if not await _bot_instance.initialize():
            _bot_instance = None
            return None
    
    return _bot_instance

async def send_telegram_notification(
    chat_id: int, 
    notification_type: str, 
    **kwargs
) -> bool:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    
    Args:
        chat_id: ID —á–∞—Ç–∞
        notification_type: –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ('order_created', 'payment_success', 'error', 'admin')
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    """
    bot = await get_telegram_bot()
    if not bot:
        logger.error("Failed to get Telegram bot instance")
        return False
    
    try:
        if notification_type == "order_created":
            return await bot.send_order_created_notification(
                chat_id=chat_id,
                order_id=kwargs.get("order_id", ""),
                product_name=kwargs.get("product_name", ""),
                generated_images_count=kwargs.get("generated_images_count", 0)
            )
        
        elif notification_type == "payment_success":
            return await bot.send_payment_success_notification(
                chat_id=chat_id,
                order_id=kwargs.get("order_id", ""),
                pdf_url=kwargs.get("pdf_url", "")
            )
        
        elif notification_type == "error":
            return await bot.send_error_notification(
                chat_id=chat_id,
                order_id=kwargs.get("order_id", ""),
                error_message=kwargs.get("error_message", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            )
        
        elif notification_type == "admin":
            admin_chat_id = kwargs.get("admin_chat_id") or chat_id
            return await bot.send_admin_notification(
                admin_chat_id=admin_chat_id,
                message=kwargs.get("message", "")
            )
        
        else:
            logger.error(f"Unknown notification type: {notification_type}")
            return False
    
    except Exception as e:
        logger.error(f"Error sending {notification_type} notification: {e}")
        return False

async def cleanup_telegram_bot():
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ Telegram –±–æ—Ç–∞"""
    global _bot_instance
    if _bot_instance:
        await _bot_instance.close()
        _bot_instance = None
